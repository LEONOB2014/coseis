#!/bin/bash -e

echo "SORD setup"
starttime=$(date)

# Get command line options
mode=guess
optimize=O
setup=yes
run=
while getopts spibgGnvm:df opt; do
case "$opt" in
  s) mode=s ;;
  p) mode=p ;;
  i) run=i ;;
  b) run=b ;;
  g) optimize=g ;;
  G) optimize=g; run=g ;;
  n) setup= ; run= ;;
  v) velmodel=y ;;
  m) machine="$OPTARG" ;;
  d) rm -rf run/* ;;
  f) rm -rf tmp/* ;;
  *) exit 1 ;;
esac
done
shift $(( OPTIND - 1 ))

# Email address
email="$LOGNAME"
[ -f email ] && email="$( cat email )"

# Symlink input file specified on command line
if [ "$1" ]; then 
  infile="$1"
  if [ ! -f "$infile" ]; then
    echo "Error: $infile not found"
    exit 1
  fi
  ln -sf "$infile" 'in.m'
fi
infile=$( readlink 'in.m' 2> /dev/null ) || infile='in.m'

# Make diretories
mkdir -p tmp
if [ -d /gpfs ]; then
  mkdir -p /gpfs/$LOGNAME/sord/run
  ln -sf /gpfs/$LOGNAME/sord/run
else
  mkdir -p run
fi

# Locations
srcdir=$( /bin/pwd )
count=$( echo run/[0-9][0-9] | sed 's/.*\///' )
[ "$count" = '[0-9][0-9]' ] && count=00
count=$( echo $count | awk '{ printf "%02d", $1+1 }' )
echo "$count" > tmp/count

# Prepare input file
cat 'in/defaults.m' 'in.m' | sed "
s/%.*$//;
s/;/\\
/g;
" | sed "
s/[]{}='	[]/ /g;
s/  */ /g;
s/^ //;
s/ $//;
/^$/d
" > tmp/input
# join lines
# " | sed -e :a -e "
# /\.\.\. *$/N;
# s/\.\.\. *\n//;
# ta

# Read input
while read key params; do
set -- $params
case "$key" in
  nt) nt=$1 ;;
  nn) nm3=( $1 $2 $3 ) ;;
  np) np3=( $1 $2 $3 ) ;;
  dx) dx=$1 ;;
  itswap) nh=$1 ;;
  npml) npml=$1 ;;
  datadir) datadir="$1" ;;
  return) break ;;
esac
done < tmp/input

[ "$run" -a "$run" != q ] && interactive=yes

# Host
if [ "$machine" ]; then :
elif [ "${HOSTNAME:0:2}" = ds ]; then machine=datastar
elif [ "${HOSTNAME:0:2}" = tg ]; then machine=teragrid
elif [ "$HOSTNAME" = master ];   then machine=babieca
else machine=$HOSTNAME
fi

# Machine attributes
maxnodes=1; maxcpus=1; maxram=800; maxmm=0; rate=200
case $machine in
  wide)                   maxcpus=2; maxram=1800 ;;
  kim)                    maxcpus=2; maxram=800  ;;
  phim)                              maxram=2800;  rate=400 ;;
  altai)                  maxcpus=8; maxram=30000; rate=100  ;; 
  babieca)  maxnodes=30;  maxcpus=2; maxram=1800;  rate=100 ;;
  teragrid) maxnodes=256; maxcpus=2; maxram=3000;  rate=500; maxmm=1080 ;;
  datastar) maxnodes=265; maxcpus=8; maxram=13500; rate=200; maxmm=1080 ;;          
esac
echo "Machine: $machine"
echo "CPUs: $(( maxnodes * maxcpus ))"

# Number of processors
[ $mode = guess -a $(( maxnodes * maxcpus )) -eq 1 ] && mode=s
[ $mode = s ] && np3=( 1 1 1 )
np=$(( np3[0] * np3[1] * np3[2] ));
[ $mode = guess -a $np -eq 1 ] && mode=s
[ $mode = guess -a $np -gt 1 ] && mode=p
nodes=$(( np / maxcpus + ( np % maxcpus > 0 ? 1 : 0 ) ))
[ $nodes -gt $maxnodes ] && nodes=$maxnodes
ppn=$(( np / nodes + ( np % nodes > 0 ? 1 : 0 ) ))
cpus=$ppn
[ $cpus -gt $maxcpus ] && cpus=$maxcpus

# Local domain size
nm3[0]=$(( nm3[0] / np3[0] + 2 * nh + ( nm3[0] % np3[0] > 0 ? 1 : 0 ) ))
nm3[1]=$(( nm3[1] / np3[1] + 2 * nh + ( nm3[1] % np3[1] > 0 ? 1 : 0 ) ))
nm3[2]=$(( nm3[2] / np3[2] + 2 * nh + ( nm3[2] % np3[2] > 0 ? 1 : 0 ) ))
nm=$( echo ${nm3[*]} | awk '{ print $1 * $2 * $3 }' )

# RAM and Wall time usage
floatsize=4
nvars=20 # oplevel 1-2
nvars=23 # oplevel 3-5
nvars=44 # oplevel 6
ram=$( echo $ppn $nm $nvars $floatsize | awk '{ printf "%.0f", $1 * ( $2 * $3 * $4 / 1024 / 1024 + 15 ) }' )
sus=$( echo $nt $ppn $nm $cpus $rate $nodes $maxcpus | awk '{ printf "%.0f", ( $1 + 2 ) * $2 * $3 / $4 / $5 / 3600000 * $6 * $7 }' )
mm=$(  echo $nt $ppn $nm $cpus $rate | awk '{ printf "%.0f", ( $1 + 2 ) * $2 * $3 / $4 / $5 / 40000 + 10 }' )
[ $maxmm -gt 0 -a $mm -gt $maxmm ] && mm=$maxmm
hh=$(( mm / 60 ))
mm=$(( mm % 60 ))
walltime=$( echo $hh $mm | awk '{ printf "%d:%02d:00", $1, $2 }' )
echo "Processes: $np"
echo "Memory usage: ${ram}Mb per node"
echo "Wall time limit: $walltime"
echo "SUs: $sus"
[ $ppn -gt $maxcpus ] && echo "Warning: exceding available CPUs per node ($maxcpus)"
[ $ram -gt $maxram ]  && echo "Warning: exceding available RAM per node (${maxram}Mb)"

[ "$setup" ] || exit 0

#------------------------------------------------------------------------------#

# Source files
base="
  globals.f90
  diffcn.f90
  diffnc.f90
  hourglass.f90
  bc.f90
  surfnormals.f90
  outprops.f90
  util.f90"
serial="
  serial.f90"
parallel="
  mpi.f90"
common="
  inread.f90
  setup.f90
  arrays.f90
  gridgen.f90
  output.f90
  momentsource.f90
  material.f90
  fault.f90
  metadata.f90
  resample.f90
  checkpoint.f90
  timestep.f90
  stress.f90
  acceleration.f90
  locknodes.f90
  sord.f90"

# Compile
. sh/config
case $optimize in
  O) fflags=$oflags ;;
  g) fflags=$gflags ;;
esac
case $mode in
  s) fc="$sfc"; files="$base $serial $common" ;;
  p) fc="$pfc"; files="$base $parallel $common" ;;
esac
make="$fc $fflags -o sord-$mode $files"
cd tmp
for file in $files; do
  ln -s "$srcdir/f/$file" &> /dev/null || :
done
echo "$make" > state
cat $files >> state
compile=yes
if [ -f state-$mode ]; then
  compile=$( cmp state state-$mode || : )
fi
if [ "$compile" ]; then
  rm -f state-$mode
  echo $make
  $make
  mv state state-$mode
  rm -f *.o *.mod *.ipo *.il *.stb
fi
rm $files
cd "$srcdir"

#------------------------------------------------------------------------------#
# Set-up and run

# Setup run directory
sh/tarball
rundir="run/$count"
echo "Run directory: $rundir"
mkdir "$rundir"
echo "$starttime: SORD setup started" >> "$rundir/log"
cp 'in.m' tmp/sord.tgz tmp/sord-$mode tmp/input "$rundir"
if [ $optimize = g ]; then
  cp f/*.f90 "$rundir"
  chmod a-w "$rundir"/*.f90
fi
cd "$rundir"
chmod a-w 'in.m'
rundir=$( /bin/pwd )
mkdir out
mkdir stats
mkdir checkpoint
mkdir debug

# Write run metadata
cat << END > runmeta.m
% SORD run metadata
  login   = '$LOGNAME';
  name    = '$( finger $LOGNAME | sed -n 's/^.*e: //p' )';
  rundate = '$( date )';
  rundir  = '$rundir';
  infile  = '$infile';
  machine = '$machine';
  host    = '$HOSTNAME';
  os      = '$( uname -a )';
  mode    = '$mode';
  np      = [ ${np3[*]} ];
END

# run scripts
code="sord"
bin="./sord-$mode"
case $machine in
datastar) . "$srcdir/sh/datastar" ;;
teragrid) . "$srcdir/sh/teragrid" ;;
babieca)  . "$srcdir/sh/babieca"  ;;
*)        . "$srcdir/sh/default"  ;;
esac

# SCECVM
if [ "$velmodel" ]; then
  if grep TeraShake "$srcdir/$infile" > /dev/null; then :; else
    echo "Error: TeraShake input file required for VM"
    exit 1
  fi
  mkdir data
  "$srcdir/util/make"
  "$srcdir/scecvm4/make"
  cp -r "$srcdir/tmp/scecvm" .
  cd scecvm
  echo 1 > exag
  echo "$dx" > dx
  echo "$npml" > npml
  cp "$srcdir/tmp/tsgrid" .
  cp "$srcdir/data/topo3.f32" .
  cp "$srcdir/data/ts-ts1.f32" .
  cp "$srcdir/data/endian0" .
  echo "Grid"
  ./tsgrid
  ibig=$( cat ibig )
  nc=$( cat nc )
  nnl=$(( nc / np + ( nc % np > 0 ? 1 : 0 ) ))
  if [ "$ibig" -lt "$nnl" ]; then
    echo "Error: ibig=$ibig in newin.h must be greater than $nnl"
    exit 1
  fi
  code="scecvm"
  bin="./scecvm4-$mode nc rlon rlat rdep rho vp vs"
  post="mv endian meta.m ts1 x1 x2 x3 rho vp vs $rundir/data"
  walltime="00:30:00"
  topdir="$rundir"
  rundir="$topdir/scecvm"
  case $machine in
  datastar) . "$srcdir/sh/datastar" ;;
  teragrid) . "$srcdir/sh/teragrid" ;;
  babieca)  . "$srcdir/sh/babieca"  ;;
  *)        . "$srcdir/sh/default"  ;;
  esac
  if [ "$run" ]; then
    echo "SCECVM"
    ./run "-$run"
  fi
  cd "$topdir"
elif [ "$datadir" ]; then
  mkdir data
  cd data
  for file in "$srcdir/$datadir/"*; do
    [ -f "$file" ] && ln "$file" . || ln -s "$file" .
  done
  endian="(not found)"
  [ -f endian ] && endian=$( cat endian )
  native="$( perl -le 'print pack('V',1) eq pack('L',1) ? "l" : "b"' )"
  if [ "$endian" != "$native" ]; then
    echo "Error: data endian=$endian, native endian=$native"
    exit 1
  fi
  cd "$rundir"
fi

echo "$(date): setup finished" >> log

# Run SORD
if [ "$run" ]; then
  echo "SORD"
  ./run "-$run"
fi

exit 0

