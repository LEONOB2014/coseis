#!/bin/bash -e
#------------------------------------------------------------------------------#

echo -e "\nSORD setup"

# Get command line options
parallel=
fflags=O
debugger=
compile=c
run=r
matlab=
deleteout=
while getopts spgGcnmd opt; do
case $opt in
  s) parallel=s ;;
  p) parallel=p ;;
  g) fflags=g ;;
  G) fflags=g; debugger=G ;;
  c) run= ;;
  n) run= ; compile= ;;
  m) matlab=m ;;
  d) deleteout=d ;;
esac
done
shift $(( OPTIND - 1 ))

# Copy input file specified on command line
[ -n "$1" ] && cp -f "$1" 'in.m'

# Strip MATLAB caracters
sed "s/%.*$//; s/;/;\n/g; s/[]={}';[]*//g;/^$/d" 'defaults.m' 'in.m' > tmp

# Read input
nout=0
while read key params; do
set -- $params
case "$key" in
  nt)  nt=$1 ;;
  nn)  nn3=( $1 $2 $3 ) ;;
  np)  np3=( $1 $2 $3 ) ;;
  out) nout=$(( nout + 1 )) ;;
esac
done < tmp

# Create output folders
[ $deleteout ] && rm -rf out
[ -e out ]       || mkdir out
[ -e out/ckp ]   || mkdir out/ckp
[ -e out/stats ] || mkdir out/stats
i=0
while [ $i -lt $nout ]; do
  i=$(( i + 1 ))
  dir=$( echo $i | awk '{ printf "out/%02d", $1 }' )
  [ -e $dir ] || mkdir $dir
done
rm -f batchjob

# Problem size
nn=$(( nn3[0] * nn3[1] * nn3[2] ));
np=$(( np3[0] * np3[1] * np3[2] ));
[ $matlab ] && np=1

#------------------------------------------------------------------------------#
# Metadata

osname=$( uname )

# Identify machine
if   [ "${HOSTNAME:0:2}" = ds ]; then machine=DataStar
elif [ "${HOSTNAME:0:2}" = tg ]; then machine=TeraGrid
elif [ "$HOSTNAME" = master ];   then machine=Babieca
else machine=$osname
fi

# Save source, input files & byte order
./tarball
cp sord.tgz out/
cp 'defaults.m' out/
cp 'in.m' out/
perl -e 'print pack('V',1) eq pack('L',1) ? "little\n":"big\n"' > out/endian

# RAM usage and run time estimate
floatsize=4
nvars=21
ram=$(( nn / np * floatsize * nvars / 1024 / 1024 ))
rate=250000
[ $matlab ] && rate=70000
wt=$(( nt * nn / np / rate + 1 ))
hh=$(( wt / 3600 ))
mm=$(( wt % 3600 / 60 ))
ss=$(( wt % 60 ))
[ $hh -ge 1 ] && ss=0
wt=$( echo $hh $mm $ss | awk '{ printf "%d:%02d:%02d\n", $1, $2, $3 }' )
echo "RAM usage: at least ${ram}Mb"
echo "Run time: at least $wt"

# Write metadata
cat << END > out/runmeta.m
login   = '$LOGNAME' ;
name    = '$( finger $LOGNAME | sed -n 's/^.*e: //p' )' ;
date    = '$( date )' ;
machine = '$machine' ;
host    = '$HOSTNAME' ;
os      = '$( uname -a )' ;
END

#------------------------------------------------------------------------------#
# Matlab backend

if [ $matlab ]; then

cat << END > batchjob
#!/bin/bash -e
unset DISPLAY
nohup matlab -r 'sord, quit' > out.log &
END
chmod u+x batchjob

[ $run ] && matlab -nodesktop -nosplash -r sord

exit

fi

#------------------------------------------------------------------------------#
# Compile Fortran

[ ! $parallel ] && [ $np -eq 1 ] && parallel=s
[ ! $parallel ] && [ $np -gt 1 ] && parallel=p

# Defaults
sfc='f95'
pfc='mpif90'
oflags='-O'
gflags='-g'

# Machine specific
case $machine in
  Linux)
    sfc='gfortran'
    oflags=
    gflags='-g -W -pedantic -std=f95 -fimplicit-none'
    ;;
  SunOS)
    oflags='-fast'
    gflags='-g -w4 -u -C'
    ;;
  DataStar)
    sfc='xlf95_r -qsuffix=f=f90 -q64 -qsuppress=cmpmsg'
    pfc='mpxlf95_r -qsuffix=f=f90 -q64 -qsuppress=cmpmsg'
    oflags='-O5'
    gflags='-g -C -qflttrap -qsigtrap -qlanglvl=95pure'
    ;;
  TeraGrid)
    sfc='ifort'
    oflags='-fast'
    gflags='-g -CB -warn -traceback'
    ;;
  Babieca)
    sfc='pgf95'
    ;;
esac
case $fflags in
  O) fflags=$oflags ;;
  g) fflags=$gflags ;;
esac

# Source files
common="\\
  f/globals.f90 \\
  f/diffcn.f90 \\
  f/diffnc.f90 \\
  f/hourglasscn.f90 \\
  f/hourglassnc.f90 \\
  f/surfnormals.f90 \\
  f/zone.f90 \\
  f/inread.f90 \\
  f/setup.f90 \\
  f/arrays.f90 \\
  f/optimize.f90 \\
  f/gridgen.f90 \\
  f/material.f90 \\
  f/momentsource.f90 \\
  f/fault.f90 \\
  f/checkpoint.f90 \\
  f/output.f90 \\
  f/pml.f90 \\
  f/stress.f90 \\
  f/acceleration.f90 \\
  f/locknodes.f90 \\
  f/timestep.f90 \\
  f/sord.f90"
serial="\\
  f/serial.f90 \\
  f/serialio.f90"
mpi="\\
  f/mpi.f90 \\
  f/mpiio.f90"

# Write makefile
cat << END > tmp
COMMON = $common
SERIAL = $serial
MPI = $mpi
fsord: fsord.f90 makefile
	$sfc $fflags fsord.f90 -o fsord
psord: psord.f90 makefile
	$pfc $fflags psord.f90 -o psord
fsord.f90: \$(SERIAL) \$(COMMON)
	cat \$(SERIAL) \$(COMMON) > fsord.f90
psord.f90: \$(MPI) \$(COMMON)
	cat \$(MPI) \$(COMMON) > psord.f90
clean:
	rm -f tmp *.mod
realclean: clean
	rm -f makefile fsord.f90 psord.f90 fsord psord batchjob
END
[ ! -f makefile ] && touch makefile
[ "$( diff tmp makefile )" != "" ] && mv tmp makefile

# Compile
case $compile$parallel in
  cs) gmake fsord clean ;;
  cp) gmake psord clean ;;
esac

#------------------------------------------------------------------------------#
# Batch submission and run commands

case $machine in

DataStar) #--------------------------------------#

cat << END
Datastar 8-way, p655+ nodes
run from a subdirectory of /gpfs/
dspoe.sdsc.edu: inpteractive
  4GB?, 40proc?, 2hr limit
dslogin.sdsc.edu: compiling and batch submition
  3672GB, 2176proc, 18hr limit
  llsubmit batchjob
other useful commands:
  llcancel <jobID>
  llq
  llq -s <jobID>
  show_q
  show_bf # backfill openings
  reslist # check allocation
END
[ $( pwd | grep -v gpfs ) ] || exit

# Batch
rate=100000
wt=$(( nt * nn / np / rate + 1 ))
hh=$(( wt / 3600 ))
mm=$(( wt % 3600 / 60 ))
ss=$(( wt % 60 ))
[ $hh -ge 1 ] && ss=0
wt=$( echo $hh $mm $ss | awk '{ printf "%d:%02d:%02d\n", $1, $2, $3 }' )
ppn=8
[ $ppn -gt $np ] && ppn=$np
nodes=$(( np / ppn + ( np % ppn > 0 ? 1 : 0 ) ))
opts="-tasks_per_node $ppn -nodes $nodes -rmpool 1 -euilib us -euidevice sn_all"
rundir=$( /bin/pwd )
cat << END > batchjob
#!/bin/bash
#@ environment = COPY_ALL;\\
AIXTHREAD_COND_DEBUG=OFF;\\
AIXTHREAD_MUTEX_DEBUG=OFF;\\
AIXTHREAD_RWLOCK_DEBUG=OFF;\\
AIXTHREAD_SCOPE=S;\\
MP_ADAPTER_USE=dedicated;\\
MP_CPU_USE=unique;\\
MP_CSS_INTERRUPT=no;\\
MP_EAGER_LIMIT=64K;\\
MP_EUIDEVELOP=min;\\
MP_EUIDEVICE=sn_single;\\
MP_EUILIB=us;\\
MP_POLLING_INTERVAL=100000;\\
MP_PULSE=0;\\
MP_SHARED_MEMORY=yes;\\
MP_SINGLE_THREAD=no;\\
RT_GRQ=ON;\\
SPINLOOPTIME=0;\\
YIELDLOOPTIME=0;
#@ wall_clock_limit = $wt
#@ class = normal
#@ node_usage = not_shared
#@ notify_user = $LOGNAME
#@ node = $nodes
#@ tasks_per_node = $ppn
#@ job_type = parallel
#@ network.MPI = sn_single,not_shared,US,HIGH
#@ notification = always
#@ job_name = job.dfm
#@ output = out.log
#@ error = err.log
#@ initialdir = $rundir
#@ queue
cd $rundir
poe ./psord $opts
END
chmod u+x batchjob

# Interactive
if [ $( hostname ) != ds100 ]; then
  echo 'login to dspoe.sdsc.edu to run interactively'
  run=
fi
case $run$parallel$debugger in
  rs)  ./fsord ;;
  rp)  poe ./psord $opts ;;
  rsG) totalview poe -a ./fsord $opts ;;
  rpG) totalview poe -a ./psord $opts ;;
esac

;;

TeraGrid) #--------------------------------------#

cat << END
configureing for Teragrid
batch submission:
qsub batchjob
END

# Batch
rate=100000
wt=$(( nt * nn / np / rate + 1 ))
hh=$(( wt / 3600 ))
mm=$(( wt % 3600 / 60 ))
ss=$(( wt % 60 ))
[ $hh -ge 1 ] && ss=0
wt=$( echo $hh $mm $ss | awk '{ printf "%d:%02d:%02d\n", $1, $2, $3 }' )
ppn=2
[ $ppn -gt $np ] && ppn=$np
nodes=$(( np / ppn + ( np % ppn > 0 ? 1 : 0 ) ))
cat << END > batchjob
#!/bin/bash
#PBS -q dque
#PBS -N sord_job
#PBS -l nodes=$nodes:ppn=$ppn
#PBS -l walltime=$wt
#PBS -o out.log
#PBS -e err.log
#PBS -V
cd $rundir
time mpirun -v -machinefile \$PBS_NODEFILE -np $np ./psord
END
chmod u+x batchjob

# Interactive
case $run$parallel$debugger in
  rs)  ./fsord ;;
  rsG) gdb ./fsord ;;
  rp)  time mpirun -v -machinefile \$PBS_NODEFILE -np $np ./psord ;;
esac

;;

Babieca) #--------------------------------------#

# Info
cat << END
configuring for Babieca
batch submission (up to 19 procs):
qsub batchjob
other useful commands: pbsnodes -a, pingd, qstat, qdel
END

# Batch
ppn=2
[ $ppn -gt $np ] && ppn=$np
nodes=$(( np / ppn + ( np % ppn > 0 ? 1 : 0 ) ))
cat << END > batchjob
#!/bin/bash
#PBS -q workq
#PBS -N sord_job
#PBS -l nodes=$nodes:ppn=$ppn
#PBS -o out.log
#PBS -e err.log
#PBS -V
sleep 2
cd $rundir
time mpiexec -np $np ./psord
END
chmod u+x batchjob

# Interactive
case $run$parallel$debugger in
  rs)  ./fsord ;;
  rsG) gdb ./fsord ;;
  rp)  mpiexec -np $np ./psord ;;
  rpG) mpiexec -np $np -dbg=gdb ./psord ;;
esac

;;

*) #--------------------------------------#

# Batch
cat << END > batchjob
#!/bin/bash
nohup mpirun -np $np ./psord > out.log &
END
chmod u+x batchjob

# Interactive
case $run$parallel$debugger in
  rs)  ./fsord ;;
  rsG) ddd ./fsord ;;
  rp)  mpirun -np $np ./psord ;;
  rpG) mpirun -np $np -dbg=ddd ./psord ;;
esac

;;

esac #--------------------------------------#

