#!/usr/bin/env python

import os, sys, getopt, time, glob, shutil, imp, subprocess

def sord( argv ):

    # Save start time
    starttime = time.asctime()
    print "SORD setup"

    # Command line options
    setup = True
    run = False
    mode = None
    machine = None
    optimize = 'O'
    opt, infiles = getopt.getopt( argv[1:], 'niqspgGm:fd' )
    for o, v in opt:
        if   o == '-n': setup = False; run = False
        elif o == '-i': run = 'i'
        elif o == '-q': run = 'q'
        elif o == '-s': mode = 's'
        elif o == '-p': mode = 'p'
        elif o == '-g': optimize = 'g'
        elif o == '-G': optimize = 'g'; run = 'g'
        elif o == '-m': machine = v
        elif o == '-f':
            f = 'tmp' + os.sep + '*'
            for f in glob.glob( f ): shutil.rmtree( f )
        elif o == '-d':
            f = 'run' + os.sep + '[0-9][0-9]'
            for f in glob.glob( f ): shutil.rmtree( f )
        else: assert False, 'unhandled option'

    # Locations
    initdir = os.path.abspath( os.getcwd() )
    srcdir  = os.path.abspath( os.path.dirname( argv[0] ) )

    # Read input file
    f = srcdir + os.sep + 'in' + os.sep + 'defaults.py'
    params = imp.load_source( 'params', f )
    for f in infiles:
        print f
        f = os.path.abspath( f )
        newparams = imp.load_source( 'newparams', f )
        for key in dir( newparams ):
            if key is 'io':
                params.io += newparams.io
            elif key[:2] is not '__' and len(key) > 1:
                if not hasattr( params, key ):
                    raise SystemExit, 'Unknown SORD parameter: ' + repr( key )
                setattr( params, key, getattr( newparams, key ) )

    # Make directories
    try: os.mkdir( 'tmp' )
    except: pass
    try: os.mkdir( 'run' )
    except: pass

    # Run count
    count = glob.glob( 'run' + os.sep + '[0-9][0-9]' )
    try: count = count[-1].split( os.sep )[-1]
    except: count = 0
    count = '%02d' % ( int( count ) + 1 )

    # Host
    host = os.uname()[1]
    if not machine:
        if   host == 'cluster.geo.berkeley.edu': machine = 'calgeo'
        elif host == 'master': machine = 'babieca'
        elif host == 'ds011':  machine = 'datastar32'
        elif host[:2] == 'ds': machine = 'datastar'
        elif host[:2] == 'tg': machine = 'tgsdsc'
        else: machine = host
    print 'Machine: ' + machine

    # Machine attributes
    machines = {
        'wide':       ( 1,   2,  3800,   500,     0 ),
        'kim':        ( 1,   2,  800,    500,     0 ),
        'phim':       ( 1,   1,  2800,   400,     0 ),
        'altai':      ( 1,   8,  30000,  100,     0 ),
        'calgeo':     ( 16,  4,  1500,   500,     0 ),
        'babieca':    ( 32,  2,  1800,   100,     0 ),
        'tgsdsc':     ( 256, 2,  3000,   1000, 1080 ),
        'datastar':   ( 265, 8,  13500,  500,  1080 ),
        'datastar32': ( 5,   32, 124000, 500,  1080 ) }
    maxnodes, maxcpus, maxram, rate, maxmm = machines[machine]

    # Number of processors
    np3 = params.np
    if not mode and maxnodes*maxcpus == 1: mode = 's'
    if mode == 's': np3 = [ 1, 1, 1 ]
    np = np3[0] * np3[1] * np3[2]
    if not mode:
        mode = 's'
        if np > 1: mode = 'p'
    nodes = min( maxnodes, ( np - 1 ) / maxcpus + 1 )
    ppn = ( np - 1 ) / nodes + 1
    cpus = min( maxcpus, ppn )

    # Domain size
    nm3 = [ ( params.nn[i] - 1 ) / np3[i] + 3 for i in range(3) ]
    i = params.faultnormal - 1
    if i >= 0: nm3[i] = nm3[i] + 2
    nm = nm3[0] * nm3[1] * nm3[2]

    # RAM and Wall time usage
    floatsize = 4
    if params.oplevel in (1,2): nvars = 20
    elif params.oplevel in (3,4,5): nvars = 23
    else: nvars = 44
    ramproc = ( nm * nvars * floatsize / 1024 / 1024 + 10 ) * 1.5
    ramnode = ( nm * nvars * floatsize / 1024 / 1024 + 10 ) * ppn
    sus = ( params.nt + 10 ) * ppn * nm / cpus / rate / 3600000 * nodes * maxcpus
    mm  = ( params.nt + 10 ) * ppn * nm / cpus / rate / 60000 * 1.5 + 10
    if maxmm > 0: mm = min( maxmm, mm )
    hh = mm / 60
    mm = mm % 60
    walltime = '%d:%02d:00' % ( hh, mm )
    print 'Procs: %s of %s' % ( np, maxnodes * maxcpus )
    print 'Nodes: %s of %s' % ( nodes, maxnodes )
    print 'RAM: %sMb of %sMb per node' % ( ramnode, maxram )
    print 'Time limit: ' + walltime
    print 'SUs: %s' % sus
    if ppn > maxcpus:
        print 'Warning: exceding available CPUs per node (%s)' % maxcpus
    if ramnode > maxram:
        print 'Warning: exceding available RAM per node (%sMb)' % maxram

    #------------------------------------------------------------------------------#
    # Set-up and run

    if not setup: return
    if subprocess.call( [ srcdir+os.sep+'make.sh', '-'+mode+optimize ] ):
        raise SystemExit, 'Error building build SORD code'
       
    # Setup run directory
    rundir = 'run' + os.sep + str( count )
    print 'Run directory: ' + rundir
    os.mkdir( rundir )
    files = infiles + [
        'tmp' + os.sep + 'sord.tgz',
        'tmp' + os.sep + 'sord-' + mode,
        'sh' + os.sep + 'clean' ]
    if optimize == 'g':
        files += glob.glob( 'src' + os.sep + '*.f90' )
    for f in files:
        shutil.copy( f, rundir )

    # Write input file
    rundir = os.path.abspath( rundir )
    os.chdir( rundir )
    log = file( 'log', 'w' )
    log.write( starttime + ': SORD setup started\n' )
    f = file( 'sord-input.py', 'w' )
    for key in dir( params ):
        if key[:2] not in [ '__', 'io' ]:
            f.write( '%s = %r\n' % ( key, getattr( params, key ) ) )
    f.write( 'io = [\n' )
    for line in params.io: f.write( repr( line ) + ',\n' )
    f.write( ']\n' )
    for f in glob.glob( '*' ): os.chmod( f, 444 )
    for f in ( 'data', 'out', 'prof', 'stats', 'debug', 'checkpoint' ):
        os.mkdir( f )

    # Template variables
    code = 'sord'
    pre = ''
    bin = './sord-' + mode
    post = ''
    login = os.getlogin()
    try: email = file( 'email', 'r' ).read()
    except: email = login
    rundate = time.asctime()
    os_ = os.uname()[3]

    # Process templates
    os.chdir( srcdir + os.sep + 'templates' )
    templates = 'default'
    if os.path.isdir( machine ): templates = machine
    templates = glob.glob( templates + os.sep + '*' ) + [ 'runmeta.py' ]
    for f in templates:
        ff = rundir + os.sep + os.path.basename( f )
        out = file( f, 'r' ).read() % locals()
        file( ff, 'w' ).write( out )
        shutil.copymode( f, ff )

    # Data directory
    if params.datadir:
        os.chdir( initdir )
        datadir = os.path.abspath( params.datadir )
        os.chdir( rundir + os.sep + 'data' )
        for f in os.listdir( datadir ):
            ff = os.path.basename( f )
            os.symlink( f, ff )
        endian = file( 'endian', 'r' ).read()
        assert endian[0] == sys.byteorder[0]

    # Run or que job
    os.chdir( rundir )
    if run == 'q':
        print 'que'
        if subprocess.call( '.' + os.sep + 'que' ):
            raise SystemExit, 'Error queing job'
    elif run:
        print 'run -' + run
        if suprocess.call( [ '.' + os.sep + 'run', '-' + run ] ):
            raise SystemExit, 'Error running job'

if __name__ == "__main__":
    sord( sys.argv )

