#!/bin/bash -e
#------------------------------------------------------------------------------#

echo "SORD Support-Opperator Rupture Dynamics"
date

mpi=guess
debug=no
batch=no
matlab=no
remote=no
while getopts spgbfmrl opt; do
  case $opt in
    s) mpi=no ;;
    p) mpi=yes ;;
    g) debug=yes ;;
    b) batch=yes ;;
    f) matlab=no ;;
    m) matlab=yes ;;
    r) remote=yes ;;
    l) remote=no ;;
  esac
done

# run on remote host
if [ $remote = yes ]; then
  host="gach.ucsd.edu"
  host="phim.ucsd.edu"
  echo "running on remote host $host"
  ssh-add -L > /dev/null || ssh-add
  ./tarball
  scp sord.tgz $host:
  ssh -x $host "tar zxf sord.tgz && cd sord && ./sord $@ -l"
  exit
fi

#------------------------------------------------------------------------------#
# Metadata

[ -e meta ] && rm -fr meta
mkdir meta

osname=$( uname )

if   [ "${HOSTNAME:0:2}" = ds ]; then machine="datastar"
elif [ "${HOSTNAME:0:2}" = tg ]; then machine="teragrid"
elif [ "$HOSTNAME" = master ];   then machine="babieca"
fi

cat << END > meta/data
name:     $( finger $LOGNAME | sed -n 's/^.*e: //p' )
logname:  ${LOGNAME}
date:     $( date )
machine:  $machine
hostname: ${HOSTNAME}
osname:   $( uname -a )
END

perl -e 'print pack('V',1) eq pack('L',1) ? "little\n":"big\n"' > meta/endian

./tarball
cp sord.tgz meta/

#------------------------------------------------------------------------------#
# Matlab backend

if [ $matlab = yes ]; then

cat << END > batchjob
#!/bin/bash -e
unset DISPLAY
nohup matlab -r "addpath m, sord, quit" > out.log &
END
chmod u+x batchjob

[ $batch = no ] && matlab -r "addpath m; sord"

exit

fi

#------------------------------------------------------------------------------#
# Fortran backend

rm -rf batchjob
if [ $debug = yes -a $batch = yes ]; then
  echo "can't debug in batch mode"
  exit
fi

# read input
for file in "in.defaults in"; do
[ -r "$file" ] || exit
nn=( 1 1 1 )
np3=( 1 1 1 )
while read key params; do
  set -- $params
  case "$key" in
  switch) swtich=$2 ;;
  case)   case=$2 ;;
  esac
  if [ "$switch" = "$case" ]; then
    case "$key" in
      n)      nn=( $1 $2 $3 ); nt=$4 ;;
      nprocs) np3=( $1 $2 $3 ) ;;
    esac
  fi
done < "$file"
done

floatsize=4
nvars=22
rate=40000

nprocs=$(( np3[0] * np3[1] * np3[2] ));
npoints=$(( nn[0] * nn[1] * nn[2] ));
ram=$(( npoints / nprocs * floatsize * nvars / 1024 / 1024 ))
wt=$(( nt * npoints / nprocs / rate + 1 ))

if   [ $wt -gt 5400 ]; then wt="$(( wt / 3600 + 1 )):00:00"
elif [ $wt -gt 90   ]; then wt="$(( wt /   60 + 1 )):00"
fi

[ $mpi = guess -a $nprocs -eq 1 ] && mpi=no
[ $mpi = guess -a $nprocs -gt 1 ] && mpi=yes

echo "RAM usage: $ram Mb"
echo "Run time: $wt"

#------------------------------------------------------------------------------#
# Create makefile and compile code

OBJECT="\\
  globals.o \\
  utils.o \\
  dfcn.o \\
  dfnc.o \\
  hgcn.o \\
  hgnc.o \\
  snormals.o \\
  input.o \\
  setup.o \\
  gridgen.o \\
  matmodel.o \\
  fault.o \\
  momentsrc.o \\
  vstep.o \\
  wstep.o \\
  output.o"

OPTFLAGS=-O

if [ $mpi = no ]; then
  OBJECT="$OBJECT \\
  main.o"
  FC=f95
  CC=cc
else
  OBJECT="$OBJECT \\
  pmain.o \\
  mpisetup.o \\
  mpioutput.o"
  FC=mpif90
  CC=mpicc
fi

case $osname in
Linux)
  FC=gfortran
  OPTFLAGS=-O3
  ;;
SunOS)
  OPTFLAGS=-fast
  ;;
esac

[ "$npoints" -lt 100000 ] && OPTFLAGS=

if [ $debug = yes ]; then
  OPTFLAGS=-g
fi

case $machine in
datastar)
  FC=mpxlf95_r
  CC=mpcc_r
  OPTFLAGS="-O3 -qstrict -qarch=pwr4 -qtune=pwr4 -q64"
  [ $debug = yes ] && OPTFLAGS="-g -qflttrap"
  ;;
babieca)
  [ $mpi = no ] && FC=pgf95
  ;;
esac

cat << END > tmp
FC = $FC
CC = $CC
FFLAGS = $OPTFLAGS
OBJECT = $OBJECT

sord-bin: \$(OBJECT) makefile
	\$(FC) \$(FFLAGS) \$(OBJECT) -o sord-bin

clean:
	rm -f *.o *.mod matlab_workspace.mat

realclean: clean
	rm -f sord-bin makefile batchjob

%.o: f/%.f95 makefile
	\$(FC) \$(FFLAGS) -c \$< -o \$@

END

[ ! -f makefile ] && touch makefile
[ "$( diff tmp makefile )" != "" ] && mv tmp makefile
rm -f tmp
gmake

#------------------------------------------------------------------------------#
# Machine specific batch submission and run commands

case $machine in

#--------------------------------------#
datastar)

cat << END
configuring for datastar
must be run from a subdirectory of /gpfs/
interactive (up to 32 procs, 64 GB, must be logged into dspoe)
batch submition (up to 1408 procs, 2816 GB):
  llsubmit batchjob
other useful commands:
  llcancel <jobID>
  llq
  llq -s <jovID>
  showq
  reslist
END
[ $( pwd | grep -v gpfs ) ] || exit

ppn=8;
[ $ppn -gt $nprocs ] && ppn=$nprocs
nodes=$(( nprocs / ppn + ( nprocs % ppn > 0 ? 1 : 0 ) ))
opts="-tasks_per_node $ppn -nodes $nodes -rmpool 1 -euilib us -euidevice sn_single"

case $debug$mpi in
  nono)   cmd="./sord-bin" ;;
  noyes)  cmd="poe ./sord-bin $opts" ;;
  yesno)  cmd="totalview poe -a ./sord-bin $opts" ;;
  yesyes) cmd="totalview poe -a ./sord-bin $opts" ;;
esac

rundir=$( /bin/pwd )
cat << END > batchjob
#!/bin/bash
#@ environment = COPY_ALL;\\
AIXTHREAD_COND_DEBUG=OFF;\\
AIXTHREAD_MUTEX_DEBUG=OFF;\\
AIXTHREAD_RWLOCK_DEBUG=OFF;\\
AIXTHREAD_SCOPE=S;\\
MP_ADAPTER_USE=dedicated;\\
MP_CPU_USE=unique;\\
MP_CSS_INTERRUPT=no;\\
MP_EAGER_LIMIT=65536;\\
MP_EUIDEVELOP=min;\\
MP_EUIDEVICE=sn_single;\\
MP_EUILIB=us;\\
MP_POLLING_INTERVAL=100000;\\
MP_PULSE=0;\\
MP_SHARED_MEMORY=yes;\\
MP_SINGLE_THREAD=no;\\
RT_GRQ=ON;\\
SPINLOOPTIME=0;\\
YIELDLOOPTIME=0;
#@ wall_clock_limit = $wt
#@ class = normal
#@ node_usage = not_shared
#@ notify_user = $LOGNAME
#@ node = $nodes
#@ tasks_per_node = $ppn
#@ job_type = parallel
#@ network.MPI = sn_single,not_shared,US,HIGH
#@ notification = always
#@ job_name = job.dfm
#@ output = out.log
#@ error = err.log
#@ initialdir = $rundir
#@ queue
cd $rundir
poe ./sord-bin
END
chmod u+x batchjob

[ $batch = no -a $( hostname ) = ds100 ] && $cmd

;;

#--------------------------------------#
teragrid)

cat << END
configureing for Teragrid
batch submission:
qsub batchjob
END

ppn=2;
[ $ppn -gt $nprocs ] && ppn=$nprocs
nodes=$(( nprocs / ppn + ( nprocs % ppn > 0 ? 1 : 0 ) ))

case $mpi in
  no)  cmd="" ;;
  yes) cmd="mpirun -v -machinefile \$PBS_NODEFILE -np $nprocs" ;;
esac

cat << END > batchjob
#!/bin/bash
#PBS -q dque
#PBS -N sord_job
#PBS -l nodes=$nodes:ppn=$ppn
#PBS -l walltime=$wt
#PBS -o out.log
#PBS -e err.log
#PBS -V
cd $rundir
time $cmd ./sord-bin
END
chmod u+x batchjob

[ $batch = no ] && $cmd ./sord-bin

;;

#--------------------------------------#
babieca)

cat << END
configuring for babieca
batch submission (up to 19 procs):
qsub batchjob
other useful commands: pbsnodes -a, pingd, qstat, qdel
END

ppn=2
[ $ppn -gt $nprocs ] && ppn=$nprocs
nodes=$(( nprocs / ppn + ( nprocs % ppn > 0 ? 1 : 0 ) ))

case $debug$mpi in
  nono)   cmd="";;
  noyes)  cmd="mpiexec -np $nprocs" ;;
  yesno)  cmd="gdb" ;;
  yesyes) cmd="mpiexec -np $nprocs -dbg=ddd" ;;
esac

cat << END > batchjob
#!/bin/bash
#PBS -q workq
#PBS -N sord_job
#PBS -l nodes=$nodes:ppn=$ppn
#PBS -o out.log
#PBS -e err.log
#PBS -V
sleep 2
cd $rundir
time $cmd ./sord-bin
END
chmod u+x batchjob

[ $batch = no ] && $cmd ./sord-bin

;;

#--------------------------------------#
*)

case $debug$mpi in
  nono)   cmd="" ;;
  noyes)  cmd="mpirun -np $nprocs" ;;
  yesno)  cmd="ddd" ;;
  yesyes) cmd="mpirun -np $nprocs -dbg=ddd" ;;
esac

cat << END > batchjob
#!/bin/bash
nohup unbuffer $cmd ./sord-bin | tee out.log &
END
chmod u+x batchjob

[ $batch = no ] && $cmd ./sord-bin

;;

esac

#------------------------------------------------------------------------------#

