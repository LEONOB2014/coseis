#!/usr/bin/env python
"""
Simple plotting of SORD output. 1D data is graphed in X-Y space. 2D is
displayed with an image. 3D data is displayed with a series of images.

TODO: memmap, npy files.

Usage
-----
quickplot [options] <datafile>

Options
-------
-c <clim>   Set upper color scale limit to constant value.
-s          For image series, step through with mouse clicks.
"""
import os, sys, getopt
import numpy as np
import matplotlib.pyplot as plt
import cst

# arguments
opts, args = getopt.getopt(sys.argv[1:], 'sc:')
opts = dict(opts)
clim = None
if '-c' in opts:
    clim = float(opts['-c'])
    clim = -clim, clim
file = args[0]

# test for file
if not os.path.exists(file):
    sys.exit('No such file: %s' % file)

# metadata
f = os.path.split(file)
for i in range(1,len(f)):
    path = os.sep.join(f[:-i])
    tail = os.sep.join(f[i:])
    meta = os.path.join(path, 'meta.py')
    if os.path.exists(meta):
        break
meta = cst.util.load(meta)
shape = meta.shapes[tail]
delta = meta.deltas[tail]
dtype = meta.dtype

# setup figure
fig = plt.figure()

# 1D plot
if len(shape) == 1:
    s = np.fromfile(file, dtype)
    t = np.arange(s.size) * delta[0]
    ax = fig.add_subplot(111)
    ax.plot(t, s)
    plt.show()

# 2D image
elif len(shape) == 2:
    nn = shape[1], shape[0]
    n = shape[0] * shape[1]
    s = np.fromfile(file, dtype, n).reshape(nn)
    ax = fig.add_subplot(111)
    im = ax.imshow(s, interpolation='nearest')
    plt.colorbar(im)
    if clim:
        im.set_clim(*clim)
    ax.set_title(tail)
    fig.show()

# 3D series of images
else:
    f1 = open(file)
    for it in range( shape[-1] ):
        nn = shape[1], shape[0]
        n = shape[0] * shape[1]
        s = np.fromfile(f1, dtype, n).reshape(nn)
        fig.clf()
        ax = fig.add_subplot(111)
        ax.set_title('%s %s' % (tail, it * delta[-1]))
        im = ax.imshow(s, interpolation='nearest')
        fig.colorbar(im)
        if clim:
            im.set_clim(*clim)
        fig.canvas.draw()
        fig.canvas.Update()
        fig.show()
        if '-s' in opts:
            fig.ginput(1, 0, False)

