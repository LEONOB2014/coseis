======
Coseis
======
Computational Seismology Tools
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

======== ========= ===== ======== ===============
Install_ Examples_ SORD_ WebSims_ `Source Code`__
======== ========= ===== ======== ===============

.. _SORD: sord.html
.. _WebSims: http://scec.usc.edu/websims
__ http://github.com/gely/coseis/

Summary
=======

Coseis is a collection of tools for earthquake simulation, rupture dynamics,
wave propagation, velocity model extraction, and visualization:

*   SORD_: Support Operator Rupture Dynamics code for spontaneous
    rupture and 3D wave propagation simulation.

*   CVM: updates, MPI parallelization and Python wrapper for the SCEC
    Community Velocity Model, `version 4`__.

*   CVM-H: aternative extraction tool and `geotechnical layer implementation`__
    for the SCEC Community Velocity Model, `Harvard version`__.

*   WebSims_: catalog, explore, compare, and disseminate large numerical
    simulations results.

*   Mesh generation, source preparation, and visualization utilities.

__ http://www.data.scec.org/3Dvelocity/
__ http://earth.usc.edu/~gely/cvmh/
__ http://structure.harvard.edu/cvm-h/

Coseis is open-source and released under the `GNU General Public License Version 3
<license.txt>`_.  You are free to use or redistribute the code, with the
obligation that you contribute back any modifications or derived works.

Author
------

| `Geoffrey Ely`__
| `Department of Earth Sciences`__
| `University of Southern California`__
| http://earth.usc.edu/~gely/
| gely@usc.edu

__ http://earth.usc.edu/~gely/
__ http://www.usc.edu/dept/earth/
__ http://www.usc.edu/

Contributions from: Steven Day, Bernard Minster, Feng Wang, Zheqiang Shi, and Jun Zhou.


System requirements
===================

*   Python_, and NumPy_ (Numerical Python).

*   (Optional) Fortran 95 compiler. Required for SORD and CVM.

*   (Optional) Message Passing Interface (MPI) library.  Required for
    SORD and CVM4 multi-processing.

*   (Optional) Matplotlib_, SciPy_, and Pyproj Python packages.  Required for
    supplemental plotting, signal processing, and mesh generation utilities.

*   (Optional) Git_ version control system.  Useful for development and staying
    updated with the latest code version.


Install
=======

Fortran and MPI installation should only be necessary for personal computers.
HPC systems generally supply specifically tuned Fortran compilers and MPI
libraries.

1.  GNU Fortran is recommended if you don't already have a Fortran 95 compiler.

    Fedora/Red Hat Linux:
    ::

        sudo yum install gfortran

    Ubuntu Linux:
    ::

        sudo apt-get install gfortran

    Mac OS X:

        First install either the iPhone or the Mac-only version of Xcode_ available
        from `Apple Developer Connection`_ (free membership required).  Then install
        the GNU Fortran version available from the `R for Mac OS X Developer's Page`_
        (versions from MacPorts and Fink seem to be problematic and are not
        recommended).

2.  MPICH2_ is recommended if you need MPI.  The included script
    install-mpich.sh_ can install MPICH2 for you.

3.  It is recommended that you install a private copy of Python for Coseis.
    The included script install-python.sh_ can install Python and NumPy for you.
    `Enthought Python Distribution`_ (EPD) is another option that includes many
    bells and whistles such as the Mayavi_ visualization package.

4.  Download the source code.  The best option is to use the `Coseis GitHub
    repository <http://github.com/gely/coseis>`__ with Git_ version control, which
    facilitates applying code updates, and merging local modifications::

        git clone git://github.com/gely/coseis.git

    Update to the latest changes anytime with:
    ::

        git pull

    Alternatively, download and unpack the source tar archive:
    ::

        curl http://earth.usc.edu/~gely/coseis/download/coseis.tgz | tar zx

5.  For laptop and workstation installations, the default system configuration
    is usually be adequate.  To test the default configuration::

        cd coseis/
        python setup.py

    Systems with batch schedulers (such as PBS or LoadLeveler) generally require
    custom configuration to specify system resources, compiler options, and
    scheduler scripts.  If Coseis has already been configured for your system you
    can use one of the included configurations.  For example, for the TeraGrid
    Ranger system at TACC::

        python setup.py --machine=tacc-ranger

    To see the list of included configurations look in the ``cst/conf/`` directory.
    Each custom configuration is located in a separate sub-directory.  To create a
    new custom configuration, make a new sub-directory following the example of
    the supplied configurations.

6.  Compile component codes:
    ::

        python setup.py build

7.  Configure the Python path:
    ::

        python setup.py path

8.  Steps 5 through 7 can be combined as:
    ::

        python setup.py --machine=tacc-ranger build path

.. _install-python.sh: ../util/install-python.sh
.. _install-mpich.sh: ../util/install-mpich.sh
.. _Git: http://git-scm.com/
.. _MPICH2: http://www.mcs.anl.gov/research/projects/mpich2/
.. _Xcode: http://developer.apple.com/technology/xcode.html
.. _Apple Developer Connection: http://connect.apple.com/
.. _R for Mac OS X Developer's Page: http://r.research.att.com/tools/
.. _Enthought Python Distribution: http://www.enthought.com/products/epddownload.php
.. _Python: http://www.python.org/
.. _NumPy: http://numpy.scipy.org/
.. _SciPy: http://www.scipy.org/
.. _Mayavi: http://code.enthought.com/projects/mayavi/
.. _Matplotlib: http://matplotlib.sourceforge.net/


Examples
========

CVM depth planes
----------------

.. image:: ../scripts/cvm/cvm4-vs500.png
.. image:: ../scripts/cvm/cvmh-vs500.png

Extract S-wave velocity at 500 meters depth. Plot using Matplotlib
::

    cd scripts/cvm
    python plane.py

Source code:
`plane.py <../scripts/cvm/plane.py>`__

CVM fence diagram
-----------------

.. image:: ../scripts/cvm/cvm4-vp-fence.png

Build a fence diagram similar to Magistrale (2000) figure 10. Plot using
Mayavi::

    cd scripts/cvm
    python fence.py

Source code:
`fence.py <../scripts/cvm/fence.py>`__

CVM-4 Basin depth
-----------------

.. image:: ../scripts/basindepth/cvm4-z25.png

Extract 3D mesh and search for the shallowest surface of Vs = 2.5 km/s.
Plot over topography using Mayavi::

    cd scripts/basindepth
    python mesh.py
    python search.py
    python viz.py

Source code:
`mesh.py <../scripts/basindepth/mesh.py>`__
`search.py <../scripts/basindepth/search.py>`__
`viz.py <../scripts/basindepth/viz.py>`__

.. vim: filetype=rst

