======================================
Coseis: Computational Seismology Tools
======================================

.. image:: fig/ely-saf-surface.jpg
   :align: right
   :target: http://earth.usc.edu/~gely/ely-saf-surface.mov

.. contents::

Components
==========

*   `SORD <sord.html>`_: Support Operator Rupture Dynamics code for spontaneous
    rupture and 3D wave propagation simulation.

*   CVM: updates, MPI parallelization and Python wrapper for the SCEC
    Community Velocity Model,
    `version 4 <http://www.data.scec.org/3Dvelocity/Version4.tar.gz>`__.

*   CVMH: aternative extraction tool and geotechnical layer implementation for
    the SCEC Community Velocity Model,
    `Harvard version <http://structure.harvard.edu/cvm-h/>`__.

*   `WebSims <http://scec.usc.edu/websims>`_: catalog, explore, compare, and
    disseminate large numerical simulations results.

*   Mesh generation, source preparation, and visualization utilities.


System requirements
===================

*   `Python <http://www.python.org/download/>`_, and
    `NumPy <http://http://numpy.scipy.org/>`_ (Numerical Python).

*   (Optional) Fortran 95 compiler. Required for SORD and CVM4.

*   (Optional) Message Passing Interface (MPI) library.  Required for
    SORD and CVM4 multi-core processing.

*   (Optional) `Matplotlib <http://matplotlib.sourceforge.net/>`_, `SciPy
    <http://www.scipy.org/>`_, and Pyproj Python packages.  Required for
    supplemental plotting, signal processing, and mesh generation utilities.

*   (Optional) `Bazaar <http://bazaar.canonical.com/>`_ version control system.
    Useful for development and staying updated with the latest code version.


Installation
============

Fortran and MPI installation should only be necessary for laptops and
workstations.  HPC systems generally supply specifically tuned Fortran
compilers and MPI libraries.

1.  GNU Fortran is recommended if you don't already have a Fortran 95 compiler.

    Fedora/Red Hat Linux:
    ::

        sudo yum install gfortran

    Ubuntu Linux:
    ::

        sudo apt-get install gfortran

    Mac OS X:

        First install either the iPhone or the Mac-only version of `Xcode
        <http://developer.apple.com/technology/xcode.html>`_ available from Apple
        Developer Connection (free `membership <http://connect.apple.com>`__ required).
        Then install the GNU Fortran version available from the `R for Mac OS X
        Developer's Page <http://r.research.att.com/tools>`_ (versions from MacPorts
        and Fink seem to be problematic and are not recommended).

2.  `MPICH2 <http://www.mcs.anl.gov/research/projects/mpich2/>`_ is recommended
    if you need MPI.  The following shell script installs MPICH2:

        `install-mpich.sh <../install/install-mpich.sh>`_

3.  It is recommended that you install a private copy of Python for Coseis.  The
    following script installs Python and NumPy:

        `install-python.sh <../install/install-python.sh>`_

    `Enthought Python Distribution
    <http://www.enthought.com/products/epddownload.php>`_ (EPD) is another
    option that includes many bells and whistles such as the `Mayavi
    <http://code.enthought.com/projects/mayavi>`_ visualization package.

4.  Download the source code.  The best option is use Bazaar version
    control, which facilitates applying code updates, and merging local
    modifications (see `Source Control`_ section for examples). The following
    script installs Bazaar and Coseis:

        `install-coseis.sh <../install/install-coseis.sh>`_

    Alternatively, download and unpack the source tar archive from here:

        http://earth.usc.edu/~gely/coseis/repo/coseis.tgz

5.  For laptop and workstation installations, the default system configuration
    is usually be adequate.  To test the default configuration::

        cd coseis/
        python configure.py

    Systems with batch schedulers (such as PBS or LoadLeveler) generally require
    custom configuration to specify system resources, compiler options, and
    scheduler scripts.  If Coseis has already been configured for your system you
    can use one of the included configurations.  For example, for the TeraGrid
    Ranger system at TACC::

        python configure.py tacc-ranger

    To see the list of included configurations look in the ``cst/conf/`` directory.
    Each custom configuration is located in a separate sub-directory.  To create a
    new custom configuration, make a new sub-directory following the example of
    the supplied configurations.

6.  Compile component codes:
    ::

        python setup.py build

7.  Configure the Python path:
    ::

        python setup.py path


Source control
==============

Bazaar_ is used for version control. Some examples:

Apply any recent updates from the repository, overwriting any local changes.
This is a way to keep up-to-date with the latest code.
::

    bzr pull
    bzr revert

See code changes since the last commit
::

    bzr diff

Commit changes
::

    bzr commit -m "Great new feature"

Create a patch
::

    bzr send -o great-new-feature.patch

See the
`Bazaar tutorials <http://doc.bazaar-vcs.org/latest/en/tutorials/>`__
for more.


Examples
========

CVM4 depth slice
----------------

.. image:: fig/cvm4-vs500.png

Extract S-wave velocity at 500 m depth. Plot using Matplotlib::

    cd scripts/cvm-example
    python mesh.py

Source code:
`mesh.py <../scripts/cvm-example/mesh.py>`__

.. include:: ../scripts/cvm-example/mesh.py
    :literal:

CVM4 fence diagram
------------------

.. image:: fig/cvm4-fence.png

Build a fence diagram similar to Magistrale (2000) figure 10. Plot using
Mayavi::

    cd scripts/fence
    python mesh.py
    python plot.py

Source code:
`mesh.py <../scripts/fence/mesh.py>`__
`plot.py <../scripts/fence/plot.py>`__

CVM4 Basin depth
----------------

.. image:: fig/cvm4-z25.png

Extract 3D mesh and search for the shallowest surface of Vs = 2.5 km/s.
Plot over topography using Mayavi::

    cd scripts/basindepth
    python mesh.py
    python search.py
    python viz.py

Source code:
`mesh.py <../scripts/basindepth/mesh.py>`__
`search.py <../scripts/basindepth/search.py>`__
`viz.py <../scripts/basindepth/viz.py>`__


.. vim: filetype=rst

