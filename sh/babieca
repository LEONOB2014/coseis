#!/bin/bash -e

if [ "$interactive" ]; then
cat << END > mf
node39:2
node40:2
node41:2
node42:2
node43:2
node44:2
node45:2
node46:2
node47:2
node48:2
node49:2
END
else
cat << END > pbsscript
#!/bin/bash
#PBS -N sord-$count
#PBS -l nodes=$nodes:ppn=$ppn
#PBS -l walltime=$walltime
#PBS -q workq
#PBS -V
mail $email -s "Started on Babieca" < /dev/null
sleep 2
cd "$rundir"
echo "\$PBS_JOBID" >> log
echo "\$(date): Start SORD run" >> log
mpiexec -n $np ./sord-$mode
echo "\$(date): Finished!" >> log
mail $email -s "Finished on Babieca" < /dev/null
END
chmod u+x pbsscript-vm
if [ "$nc" ]; then
cat << END > pbsscript-vm
#!/bin/bash
#PBS -N sord-vm-$count
#PBS -l walltime=$walltime
#PBS -l nodes=$nodes:ppn=$ppn
#PBS -q workq
#PBS -V
mail $email -s "Started on Babieca" < /dev/null
sleep 2
cd "$rundir"
echo "\$PBS_JOBID" >> log
echo "\$(date): Start VM run" >> log
cd "$rundir/vm"
mpiexec -n $np ./scecvm4-$mode $nc rlon rlat rdep rho vp vs
mv rho vp vs "$rundir/data"
cd "$rundir"
echo "\$(date): Start SORD run" >> log
mpiexec -n $np ./sord-$mode
echo "\$(date): Finished!" >> log
mail $email -s "Finished on Babieca" < /dev/null
END
chmod u+x pbsscript-vm
fi
fi
  
case $run in
  i) mpirun -machinefile mf -np $np ./sord-$mode ;;
  g) mpirun -machinefile mf -np $np -dbg=gdb ./sord-$mode ;;
  b) nohup mpirun -machinefile mf -np $np ./sord-$mode > out.log & :; pid=$! ;;
  q) pbsjob=$( qsub pbsscript ) ;;
esac

if [ "$pid" ]; then
  echo "$pid" >> log
  echo "Background job started, to cancel: out/$count/cancel.sh"
  echo "#!/bin/bash" > 'cancel.sh'
  echo "kill $pid" >> 'cancel.sh'
  chmod u+x 'cancel.sh'
fi
if [ "$pbsjob" ]; then
  echo "$pbsjob" >> log 
  echo "PBS job submitted, to cancel: out/$count/cancel.sh"
  echo "#!/bin/bash" > 'cancel.sh'
  echo "qdel $pbsjob" >> 'cancel.sh'
  chmod u+x 'cancel.sh'
fi

