#!/bin/bash -e

if [ $( /bin/pwd | grep -v gpfs ) ]; then
  echo "Error: jobs must be run from /gpfs"
  exit
fi
if [ "$interactive" -a "$HOSTNAME" != ds100 ]; then
  echo "Error: interactive jobs must be launched from dspoe"
  exit
fi
if [ -z "$interactive" -a "$mode" = p ]; then
cat << END > llscript
#!/bin/bash
#@environment = COPY_ALL;\\
#AIXTHREAD_SCOPE=S;\\
#MP_ADAPTER_USE=dedicated;\\
#MP_CPU_USE=unique;\\
#MP_CSS_INTERRUPT=no;\\
#MP_EAGER_LIMIT=64K;\\
#MP_EUIDEVELOP=min;\\
#MP_LABELIO=yes;\\
#MP_POLLING_INTERVAL=100000;\\
#MP_PULSE=0;\\
#MP_SHARED_MEMORY=yes;\\
#MP_SINGLE_THREAD=no;\\
#RT_GRQ=ON;\\
#SPINLOOPTIME=0;\\
#YIELDLOOPTIME=0;
#@ job_name = sord-$count
#@ initialdir = $rundir
#@ node = $nodes
#@ tasks_per_node = $ppn
#@ wall_clock_limit = $walltime
#@ notification = always
#@ notify_user = $LOGNAME
#@ job_type = parallel
#@ class = normal
#@ node_usage = not_shared
#@ network.MPI = sn_all, shared, US
#@ output = out.\$(jobid)
#@ error = err.\$(jobid) 
#@ queue
mail $email -s "Started on DataStar" < /dev/null
cd "$rundir"
END

if [ "$nc" ]; then
cp llscript llscript-vm
cat << END >> llscript-vm
echo "\$(date): Start VM run" >> log
cd "$rundir/vm"
poe ./scecvm4-$mode $nc rlon rlat rdep rho vp vs
mv rho vp vs "$rundir/data"
cd "$rundir"
echo "\$(date): Start SORD run" >> log
poe ./sord-$mode
echo "\$(date): Finished!" >> log
mail $email -s "Finished on DataStar" < /dev/null
END
chmod u+x llscript-vm
fi

cat << END >> llscript
echo "\$(date): Start SORD run" >> log
poe ./sord-$mode
echo "\$(date): Finished!" >> log
mail $email -s "Finished on DataStar" < /dev/null
END
chmod u+x llscript
fi

opts="-tasks_per_node $ppn -nodes $nodes -rmpool 1 -euilib us -euidevice sn_all"
case "$mode$run" in
  si) ./sord-s ;;
  sg) totalview ./sord-s ;;
  sb) nohup ./sord-s > out.log & :; pid=$! ;;
  pi) poe ./sord-p $opts ;;
  pg) tvpoe ./sord-p $opts ;;
  pb) nohup poe ./sord-p $opts > out.log & :; pid=$! ;;
  pq) lljob=$( llsubmit llscript ) ;;
esac

if [ "$pid" ]; then
  echo "$pid" >> log
  echo "Background job started, to cancel: out/$count/cancel.sh"
  echo "#!/bin/bash" > 'cancel.sh'
  echo "kill $pid" >> 'cancel.sh'
  chmod u+x 'cancel.sh'
fi
if [ "$lljob" ]; then
  echo "$lljob" >> log 
  echo "LoadLeveler job submitted, to cancel: out/$count/cancel.sh"
  echo "#!/bin/bash" > 'cancel.sh'
  echo "llcancel $lljob" >> 'cancel.sh'
  chmod u+x 'cancel.sh'
fi

