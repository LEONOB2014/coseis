#!/bin/bash -e

if [ $( /bin/pwd | grep -v gpfs ) ]; then
  echo "Error: jobs must be run from /gpfs"
  exit
fi

cat << END > run-$code
#!/bin/bash -e
if [ "\$HOSTNAME" != ds100 ]; then
  echo "Error: interactive jobs must be launched from dspoe"
  exit
fi
cd "$rundir"
echo "\$( date ): Start $code" >> log
$pre
opts="-tasks_per_node $ppn -nodes $nodes -rmpool 1 -euilib us -euidevice sn_all"
case "\${1:--i}$mode" in
  -is) $bin ;;
  -gs) totalview $bin ;;
  -bs) nohup $bin > out.log & :; pid=\$!
  -ip) poe $bin \$opts ;;
  -gp) tvpoe $bin \$opts ;;
  -bp) nohup poe $bin \$opts > out.log & :; pid=\$!
esac
cd "$rundir"
if [ "\$pid" ]; then
  echo "Background job started with PID \$pid" >> log
  echo "Background job started with PID \$pid" ;;
else
  $post
fi
echo "\$( date ): Finish $code" >> log
END

cat << END > que-$code
#!/bin/bash
llsubmit script-$code >> log
END

cat << END > script-$code
#!/bin/bash
#@environment = COPY_ALL;\\
#AIXTHREAD_SCOPE=S;\\
#MP_ADAPTER_USE=dedicated;\\
#MP_CPU_USE=unique;\\
#MP_CSS_INTERRUPT=no;\\
#MP_EAGER_LIMIT=32768;\\
#MP_EUIDEVELOP=min;\\
#MP_LABELIO=yes;\\
#MP_POLLING_INTERVAL=100000;\\
#MP_PULSE=0;\\
#MP_SHARED_MEMORY=yes;\\
#MP_SINGLE_THREAD=no;\\
#RT_GRQ=ON;\\
#SPINLOOPTIME=0;\\
#YIELDLOOPTIME=0;
#@ job_name = $code-$count
#@ initialdir = $rundir
#@ node = $nodes
#@ tasks_per_node = $ppn
#@ wall_clock_limit = $walltime
#@ notification = always
#@ notify_user = $email
#@ job_type = parallel
#@ class = normal
#@ node_usage = not_shared
#@ network.MPI = sn_all, shared, US
#@ output = out.\$(jobid)
#@ error = err.\$(jobid) 
#@ queue
cd "$rundir"
echo "\$( date ): Start $code" >> log
$pre
poe $bin
cd "$rundir"
$post
echo "\$( date ): Finish $code" >> log
END

chmod u+x run-$code que-$code script-$code

