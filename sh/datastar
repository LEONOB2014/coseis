#!/bin/bash -e


cat << END > run
#!/bin/bash -e
mode=$mode
cd "$rundir"
if [ \$( /bin/pwd | grep -v gpfs ) ]; then
  echo "Error: jobs must be run from /gpfs"
  exit
fi
echo "\$( date ): $code started" >> log
opts="-labelio yes -tasks_per_node $ppn -nodes $nodes -rmpool 1 -euilib us -euidevice sn_all"
$pre
case "\$mode\${1:--i}" in
  s-i)  hpmcount -o hpm_out $bin ;;
  s-g)  pdx $bin ;;
  s-tv) totalview $bin ;;
  p-i)  poe hpmcount -o hpm_out $bin \$opts ;;
  p-tv) tvpoe $bin \$opts ;;
esac
$post
echo "\$( date ): $code finished" >> log
END

cat << END > que
#!/bin/bash
cd "$rundir"
if [ \$( /bin/pwd | grep -v gpfs ) ]; then
  echo "Error: jobs must be run from /gpfs"
  exit
fi
llsubmit script >> log
END

cat << END > script
#!/bin/bash
#@environment = COPY_ALL;\\
#AIXTHREAD_SCOPE=S;\\
#MP_ADAPTER_USE=dedicated;\\
#MP_CPU_USE=unique;\\
#MP_CSS_INTERRUPT=no;\\
#MP_EAGER_LIMIT=16384;\\
#MP_EUIDEVELOP=min;\\
#MP_LABELIO=yes;\\
#MP_POLLING_INTERVAL=100000;\\
#MP_PULSE=0;\\
#MP_SHARED_MEMORY=yes;\\
#MP_SINGLE_THREAD=no;\\
#RT_GRQ=ON;\\
#SPINLOOPTIME=0;\\
#YIELDLOOPTIME=0;
#@ job_name = $code$count
#@ initialdir = $rundir
#@ node = $nodes
#@ tasks_per_node = $ppn
#@ wall_clock_limit = $walltime
#@ notification = always
#@ notify_user = $email
#@ job_type = parallel
#@ class = normal
#@ node_usage = not_shared
#@ network.MPI = sn_all, shared, US
#@ output = out.\$(jobid)
#@ error = err.\$(jobid) 
#@ queue
cd "$rundir"
echo "\$( date ): $code started" >> log
$pre
poe $bin
$post
echo "\$( date ): $code finished" >> log
END

chmod u+x run que script

