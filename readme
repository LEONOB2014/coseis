--------------------------------------------------------------------------------
SORD - Support Operator Rupture Dynamics
--------------------------------------------------------------------------------

  SORD models spontaneous rupture on a fault within a 3D isotropic
  viscoelastic solid.  The equations of motion are approximated with second
  order a Support-Operator method on a logically rectangular mesh.  The fault
  is modeled with a slip-weakening, frictional, internal boundary condition.
  There are two versions, one written in Fortran and one in MATLAB.  The
  MATLAB version has integrated visualization and is good for testing small
  problems.  The Fortran version is best for large problems and is
  parallelized with MPI. 

AUTHOR

  Geoffrey Ely
  Institute of Geophysics and Planetary Physics
  Scripps Institution of Oceanography
  University of California, San Diego
  9500 Gilman Dr.
  La Jolla, CA 92093-0225
  gely@ucsd.edu

USAGE

  ./sord infile

  See 'defaults' and the 'infiles' directory for input explanation and examples.

  Options:
    -m  use MATLAB backend (default is Fortran)
    -n  setup only, don't compile or run
    -d  delete output from previous run before starting
    -r  dispatch to remote host, edit 'remote' to set host
    -g  run in debugger

  When porting to a new machine, you may have to modify the sord script for 
  the proper compiling and batch submission parameters.  For the parallel
  version you will need MPI installed.

COORDINATE SYSTEM
 
      v---------v                        o----x----o         w----1----w
     /         /|                       /         /|        /         /|
    /    .----. |            k         y    3----y |       2    z----2 |
   /    /|   /| |           /         /    /|   /| z      /    /    /| 3
  v----.----v | |     j----0         o----x----o | |     w----1----w | |
  |    | w--|-' |          |         |    | w--|-1 |     |    |    | x |
  |    |/   |/  v          |         |    |/   |/  o     |    |    |/  w
  |    '----'  /           l         z    2----z  /      3    y----3  / 
  |         | /                      |         | y       |         | y  
  |         |/                       |         |/        |         |/   
  v---------v                        o----x----o         w----1----w    
                                                       
  Non-staggered                      Staggered (1)       Staggered (2)
                                   
  v: v = velocity                    1 2 3: vx vy vz = velocity        
     u = displacement                x y z: wyz wzx wxy = shear stress 
     x = node locations                  w: wxx wyy wzz = normal stress
     rho = density                          rho lam mu = material props
  w: w = stress                             x = node locations (2) 
     lam mu = elastic moduli             o: x = node locations (1) 


COMPUTATIONAL CYCLE
 
U = displacement vector
V = velocity vector
A = acceleration vector
W = stress tensor
rho = density
c lamda mu = elastic moduli
 
Linearized conservation of momentum, Newton's 2nd law
  A = divW/rho
  (hourglass corrections)
  (Fault boundary condition)
  V' = A
  U' = V
Modified displacement
  U~ = U + dt*beta*V
Strain
  E = [gradU~ + (gradU~)^T]/2
Stress-strain constitutive law
  W = c:E
Viscoelastic solid, Kelvin-Voight model, linear, isotropic,
spring and dashpot in parallel
  W = lamda*trace(E)*I + 2*mu*E
Moment tensor source
  W = W + M'*dt


FAULT BOUNDARY CONDITION

n   = fault normal vector, n points toward the positive side of the fault
T   = traction exerted by the positive side
T0  = initial traction
Wn0 = initial normal component of stress
R   = restoring force on a node
m   = nodal mass
s   = element area
F   = friction, |Ts| cannot exceed friction

Acceleration and velocity of the double nodes due to restoring forces
and traction.

with no fault
A0 = A1 = (R0+R1)/(m0+m1)

- side acc   A0 = [R0 + s*(T-T0)]/m0	
+ side acc   A1 = [R1 - s*(T-T0)]/m1

- side vel   V0_ = V0 + dt*[R0 + s*(T-T0)]/m0
+ side vel   V1_ = V1 + dt*[R1 - s*(T-T0)]/m1

- side disp  U0_ = U0 + dt*{ V0(t0) + dt*[R0 + s*(T-T0)]/m0 }
+ side disp  U1_ = U1 + dt*{ V1(t0) + dt*[R1 - s*(T-T0)]/m1 }

dA = A1 - A0
   = (R1/m1-R0/m0) - s*(1/m1+1/m0)*(T-T0)

dV = V1_ - V0_
   = V1-V0 + dt*dA
   = V1-V0 + dt*(R1/m1-R0/m0) - dt*s*(1/m1+1/m0)*(T-T0)

dU = U1_ - U0_
   = U1-U0 + dt*dV
   = U1-U0 + dt*(V1-V0) + dt^2*(R1/m1-R0/m0) - dt^2*s*(1/m1+1/m0)*(T-T0)

Zero relative acceleration boundary condition
dA = 0
Ta = T0 + (R1/m1-R0/m0) / [s*(1/m1+1/m0)]

Zero relative velocity boundary condition
dV = 0
Tv = T0 + [V1-V0 + dt*(R1/m1-R0/m0)] / [dt*s*(1/m1+1/m0)]
   = Ta + (V1-V0) / [dt*s*(1/m1+1/m0)]

Zero relative normal displacement boundary condition
dU = 0
Tu = T0 + [U1-U0 + dt*(V1-V0) + dt^2*(R1/m1-R0/m0)] / [dt^2*s*(1/m1+1/m0)]
   = Tv + (U1-U0) / [dt^2*s*(1/m1+1/m0)]

Shear component of traction is bounded by friction
Ts = Tv.(I-nn)
Ts~ = / Ts,         |Ts| <= F
      \ F*Ts/|Ts|,  |Ts| >  F

Fault cannot open
Tn = Tv.n

Normal component of traction is bounded by cohesion (fault can open)
Tn = Tu.n
   = (Tv + U1-U0).n / [dt^2*s*(1/m1+1/m0)]
Tn~ = / Tn,  Tn <= co
      \ co,  Tn >  co

Total traction bounded by friction
T~ = Tn~.n + Ts~

Update accelerations
A0_ = (R0 + s*(T~-T0))/m0
A1_ = (R1 - s*(T~-T0))/m1

Update velocities
V0_ = V0 + dt*(R0 + s*(T~-T0))/m0
V1_ = V1 + dt*(R1 - s*(T~-T0))/m1

DFM fault boundary condition
T = T0 + [R1*m0-R0*m1 + m1*m0*(v1-v0)/dt] / [s*(m1+m0)]


SLIP-WEAKENING FRICTION LAW

l     = slip length
mu(l) = coefficient of friction
mus   = coefficient of static friction
mud   = coefficient of dynamic friction
dc    = slip weakening distance

F = mu(l) * T.n + co
mu(l) = / mus - (us-ud)*l/dc,  l <= dc
        \ mud,                 l >  dc


      mus +
          |\
 ^ T0/Wn0 + \
 |        |  \
 u    mud +   +---------
          |
          +---+---------
             dc   l->


Strength parameter
s = (Tu - T0)/(T0 - Tf)

Estimate critical radius needed for spontaneous rupture
rc =~ mu*dc*(Tu - Tf)/(T0 - Tf)^2

Breakdown zone width
lc = dc*mu/(Tu - Tf)

Estimate dc needed to resolve breakdown zone
dc =~ (3 or 4)*dx*(Tu - Tf)/mu



KOSTROV SOLUTION

Kostrov, 1964
Day, 1982, p 717

Circular crack expanding at a uniform rupture velocity

vslip = H(T) * C * dtau / mu * vs * (T + r/vrup) / sqrt(T * (T + 2*r/vrup))

T    = reduced time t - r/vrup
H    = unit step function
C    = .81   for nu = .25 and vrup = .9*vs (Dahlen, 1974)
dtau = stress drop
mu   = rho * vs^2
vrup = 0.9 * vs



HOURGLASS CORRECTIONS

One of the first works in this direction was presented by Kosloff and Frazier (1978), but in their formulation it is necessary to solve 4 systems of 8 equations for distorted three-dimensional elements, and this is not cost efficient for dynamic analysis.
Flanagan and Belytschko (1981), Belytschko (1983), and Belytschko, Ong, Liu and Kennedy (1984) presented a systematic and effective way to hourglass control, but in both formulations a parameter, to be defined by the user, is required.  
Belytschko and Binderman (1993) implemented the hourglass control of the eight-node hexahedral element, where the stabilization parameter is not required, although the stabilization matrix still depends on the Poisson coefficient; the aspect was eliminated by Liu, Hu and Belytschko (1994).

Kosloff, D. and Frazier, G. A.,1978, "Treatment of hourglass patterns in low-order finite element codes", Int. J. Num. Analyt. Meth. Geomech., vol. 2, pp. 57-72.


***Flanagan, D. P. and Belytschko, T.,1981, "A uniform strain hexahedron and quadrilateral with orthogonal hourglass control", Int. J. Num. Meth. Engng., vol. 17, pp. 679-706.

Belytschko, T.,1983, "Correction of article by D. P. Flanagan and T. Belytschko", Int. J. Num. Meth. Engng., vol. 19, pp. 467-468.

Belytschko, T., Ong, J. S-J., Liu, W. K. and Keneddy, J. M., 1984, "Hourglass control in linear and nonlinear problems", Comp. Meth. Appl. Mech. Engng., vol. 43, pp. 251-276.



***Belytschko, T. and Binderman, L. P., 1993, "Assumed strain stabilization of the eight-node hexahedral element", Comp. Meth. Appl. Mech. Engng., vol. 105, pp. 225-260.

Liu, W. K., Hu,Y. K. and Belytschko, T.,1994, "Multiple quadrature underintegrated finite elements", Int. J. Num. Meth. Engng., vol. 37, pp. 3263-3289.


From LS_DYNA theoretica manual:

Belytschko, T., Wong, B. L. and Chiang, H. Y., 1992, "Advances in one-point quadrature", Int. J. Num. Meth. Engng., vol. 96, pp. 93-107.

Wilkins et al, "A Method for Computer Simulation of Problems in Solid Mechanics and Gas Dynamics in Three Dimensions and Time", UC, LLNL, Rept. UCRL-51574 (1974)

Deformation Modes for hexahedron: 8 * 3 = 24 degrees of freedom

Rigid Body: 6 = 3 translation + 3 rotation

Uniform strain: 6

   0----x      .----O      .----.      .----.
  /|          /|   /|     /|   /|     /|   /|
 y |         .----O |    O----O |    .----. |
   z         | '--|-O    | '--|-'    | O--|-O
             |/   |/     |/   |/     |/   |/ 
             '----O      O----O      O----O  
               Z1          Z2          Z3

Nonuniform strain: 12 = 24 DOF - 6 rigid body - 6 uniform strain

   .----.      .----O      .----O      O----.
  /|   /|     /|   /|     /|   /|     /|   /|
 O----O |    .----O |    O----. |    .----O |
 | O--|-O    | O--|-'    | '--|-O    | '--|-O
 |/   |/     |/   |/     |/   |/     |/   |/ 
 '----'      O----'      O----'      O----'  
  Z2 Z3       Z3 Z1       Z1 Z2      Z1 Z2 Z3

Y = mu*(lamda+mu)/6/(lamda+2*mu)

Q = Y*dU*dx^2*dy^2/dv^2
A = dQ/dv/rho

Q = Y*dU*/h^2
A = dQ/h^3/rho



MOMENT SOURCE

del^2*phi - phi'' / vp^2  =  -4*pi*delta(r) * f(t)
phi  =  -f(t-r/vp) / r
U    =  del*phi   =  f(t-r/vp)  / r^2  +  f'(t-r/vp)  / r/vp
V    =  del*phi'  =  f'(t-r/vp) / r^2  +  f''(t-r/vp) / r/vp
M    =  -4 * pi * rho * vp^2 * f

Brune Source
M   = -H * M0 * e^(-t/T) / T   * (t + T) + M0
M'  =  H * M0 * e^(-t/T) / T^2 *  t
M'' = -H * M0 * e^(-t/T) / T^3 * (t - T)

       H * M0 * e^(-t/T) * ( t*vp/r - t/T + 1 )
V   =  ----------------------------------------
       4 * pi * rho * vp^2 * T^2 * r * vp

Smooth Brune
M   = -H * M0 * e^(-t/t) / T^2 / 2 * (t^2 + 2*t*T + 2*T^2) + M0
M'  =  H * M0 * e^(-t/t) / T^3 / 2 *  t^2
M'' = -H * M0 * e^(-t/t) / T^4 / 2 * (t^2 - 2*t*T)

       H * M0 * e^(-t/T) * ( t*vp/r - t/T + 2 ) * t
V   =  ----------------------------------------
       8 * pi * rho * vp^2 * T^3 * r * vp


PML ABSORBING BOUNDARY

Damping operator
D     = [ d(x)  0     0
          0     d(y)  0
          0     0     d(z) ]

Partial derivative operator
[del] = [ d/dx  0     0
          0     d/dy  0
          0     0     d/dz ]

Olsen no PML
F = divW
V' = F/rho
G = gradV
W' = lamda*trace(G)*I + mu*(G + G^T)

SORD Hourglass
F = divW + hourglass
V' = F/rho
U' = V
G = grad(U + gamma*V)
W = lamda*trace(G)*I + mu*(G + G^T)

SORD PML
if D == 0
  F = divW
else
  P' + DP = [del]W
  F = 1.P'
end
V' = F/rho
U' = V
if D == 0
  G = gradU
else
  G' + DG = gradV
end
W = lamda*trace(G)*I + mu*(G + G^T)

PML Discretization
(p2 - p1)/dt   + d*(p2 + p1)/2 = dW/dx
(p2 - p1)/dt*2 + d*(p2 + p1)   = 2*dW/dx
(p2 - p1)/dt*(2 + d*dt) + 2*d*p1 = 2*dW/dx
(p2 - p1)/dt = -2*d/(2 + d*dt)*p1 + 2/(2 + d*dt)*dW/dx
v2 = v1 + (p2 - p1)/dt/rho
u2 = u1 + v * dt
(g2 - g1)/dt  + d*(g2 + g1)/2  = dv/dx
g2 = (2 - d*dt)/(2 + d*dt)*g1 + 2*dt/(2 + d*dt)*dv/dx
s  = c:g

nb  = PML thickness (in nodes)
i   = node index counted from the PML interface
d   = d0 * (i/nb)^2
d0  = t*vs0/h*( c1 + c2*nb + c3*nb^2 )
t   = 3.5
vs0 = 2 / ( 1/max(vs) + 1/min(vs) )
c1  =  8/15
c2  = -3/100
c3  =  1/1500


REYNOLDS GLYPH

r = Wij ni nj

Vector

r = v^p * |cos(f)|^p
x = r * [ sin(f) * cos(t)
          sin(f) * sin(t)
          cos(f) ]
n = [ (p+1) * sin(f)^2 * cos(t)
      (p+1) * sin(f)^2 * sin(t)
      sin(f) / |cos(f)| * ( cos(f)^2 - p*sin(f)^2 ) ]


ELASTIC MODULI

  Lame parameters
  mu    = rho * vs^2
  lamda = rho * ( vp^2 - 2*vs^2 )

  Poisson's ratio
  nu = .5 * lamda / ( lamda + mu )
  nu = .5 * (vp^2 - 2*vs^2) / (vp^2 - vs^2)
  nu =  0          fluid
  nu = .25 to .3   crustal rocks
  nu = .25         Poisson solid vp/vs = sqrt(3)

COURANT STABILITY CONDITION

  dt * vp * sqrt(3) / dx   >    1

  A = divW/rho
  V' = A
  U' = V
  U~ = U + dt*beta*V
  E = [gradU~ + (gradU~)^T]/2
  W = lamda*trace(E)*I + 2*mu*E


DOMAIN DECOMPOSITION DIAGRAM

                          .---. 1     
  Surface                 |   |
  ------- o---o 1         o---o i1node
          | o | 1         | o | i1cell
          o---o           o---o
          | o |           | o |
          o---o           o---o i2node   .---. 1     
    PML   | o |           | o | i2cell   | o | i1cell
          o---o           '---' nm=5     o---o i1node
          | o |                          | o |
          o---o i1pml                    o---o
  ------- | o | i1pml                    | o |
          x---x i1pml+1   .---. 1        x---x i2node
  Elastic |[x]| i1pml+1   |[x]| i1cell   |[x]| i2cell
          x---x           x---x i1node   '---' nm=5  
          |[x]|           |[x]|
  Fault-> xx-xx           xx-xx i2node   .---. 1     
          |[x]|           |[x]| i2cell   |[x]| i1cell
          x---x           '---' nm=5     x---x i1node
  Elastic |[x]| i2pml-2                  | o |
          x---x i2pml-1                  o---o
  ------- | o | i2pml-1                  | o |
          o---o i2pml     .---. 1        o---o i2node
          | o |           | o | i1cell   | o | i2cell
          o---o           o---o i1node   '---' nm    
    PML   | o |           | o |
          o---o           o---o
          | o |           | o | i2cell
          o---o           o---o i2node   .---. 1     
          | o | 15        | o |          | o | i1cell i2cell
  ------- o---o nn=16     '---' nm=5     o---o i1node i2node
  Surface       n=15                     |   |
                                         '---' nm=3         


INSTALLING MPICH2

gforker

/configure --enable-f90 --with-device=ch3:shm
make
make install

cd
echo "secretword=<secretword>" > .mpd.conf
chmod 600 .mpd.conf

